version: '3.9'
services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: greflect
      POSTGRES_PASSWORD: greflect
      POSTGRES_DB: greflect
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init-v2.sql:/docker-entrypoint-initdb.d/01-init-v2.sql:ro
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U greflect -d greflect"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:latest
    volumes:
      - qdrant_data:/qdrant/storage
    expose:
      - "6333"
    restart: unless-stopped

  postgrest:
    image: postgrest/postgrest:v12.2.3
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGRST_DB_URI: postgres://greflect:greflect@postgres:5432/greflect
      PGRST_DB_SCHEMAS: public
      PGRST_DB_ANON_ROLE: greflect
      PGRST_DB_USE_LEGACY_GUCS: "false"
      PGRST_DB_AGGREGATES_ENABLED: "true"
    ports:
      - "3001:3000"

  api:
    build: ./apps/api
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
    env_file: .env
    environment:
      POSTGRES_URL: ${POSTGRES_URL}
      PORT_API: ${PORT_API:-4000}
    expose:
      - "4000"
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  worker:
    build: ./apps/worker
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
      api:
        condition: service_healthy
    env_file: .env
    environment:
      POSTGRES_URL: ${POSTGRES_URL}
      QDRANT_URL: ${QDRANT_URL}
      XAI_API_KEY: ${XAI_API_KEY}
      XAI_API_BASE: ${XAI_API_BASE}
      XAI_MODEL: ${XAI_MODEL}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_EMBED_MODEL: ${OPENAI_EMBED_MODEL}
      BRAVE_API_KEY: ${BRAVE_API_KEY}
      STEP_INTERVAL_MS: ${STEP_INTERVAL_MS}
      IDENTITY_EVERY_N: ${IDENTITY_EVERY_N}
      SHORT_TERM_LIMIT: ${SHORT_TERM_LIMIT}
      VECTOR_TOP_K: ${VECTOR_TOP_K}
    restart: unless-stopped

  web:
    build: ./apps/web
    depends_on:
      api:
        condition: service_healthy
    env_file: .env
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      PORT_WEB: ${PORT_WEB:-3000}
    expose:
      - "3000"
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs
    depends_on:
      web:
        condition: service_started
      api:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  qdrant_data:
